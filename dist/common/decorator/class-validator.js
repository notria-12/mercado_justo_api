"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsUrl = exports.Min = exports.ArrayNotEmpty = exports.IsBoolean = exports.IsObject = exports.IsDateString = exports.IsCEP = exports.IsCPF = exports.IsCNPJ = exports.IsPhoneNumber = exports.IsIn = exports.IsString = exports.IsNumberString = exports.IsMongoId = exports.IsArray = exports.MaxLength = exports.MinLength = exports.IsNumber = exports.IsEmail = exports.IsNotEmpty = void 0;
const class_validator_1 = require("class-validator");
const is_cnpj_decorator_1 = require("./is-cnpj.decorator");
const is_cpf_decorator_1 = require("./is-cpf.decorator");
const is_cep_decorator_1 = require("./is-cep.decorator");
const ValidationMessages = require("./validation-messages");
const IsNotEmpty = (options) => (0, class_validator_1.IsNotEmpty)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isNotEmpty(vArgs) }));
exports.IsNotEmpty = IsNotEmpty;
const IsEmail = (emailOptions, options) => (0, class_validator_1.IsEmail)(Object.assign({}, emailOptions), { message: vArgs => ValidationMessages.isEmail(vArgs) });
exports.IsEmail = IsEmail;
const IsNumber = (numberOptions, options) => (0, class_validator_1.IsNumber)(Object.assign({}, numberOptions), Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isNumber(vArgs) }));
exports.IsNumber = IsNumber;
const MinLength = (min, options) => (0, class_validator_1.MinLength)(min, Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.minLength(vArgs, min) }));
exports.MinLength = MinLength;
const MaxLength = (max, options) => (0, class_validator_1.MaxLength)(max, Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.maxLength(vArgs, max) }));
exports.MaxLength = MaxLength;
const IsArray = (example = '', options) => (0, class_validator_1.IsArray)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isArray(vArgs, example) }));
exports.IsArray = IsArray;
const IsMongoId = (options) => (0, class_validator_1.IsMongoId)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isMongoId(vArgs) }));
exports.IsMongoId = IsMongoId;
const IsNumberString = (numericOptions, options) => (0, class_validator_1.IsNumberString)(Object.assign({}, numericOptions), Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isNumberString(vArgs) }));
exports.IsNumberString = IsNumberString;
const IsString = (options) => (0, class_validator_1.IsString)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isString(vArgs) }));
exports.IsString = IsString;
const IsIn = (values, options) => (0, class_validator_1.IsIn)(values, Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isInMessage(vArgs, values) }));
exports.IsIn = IsIn;
const IsPhoneNumber = (region, options) => (0, class_validator_1.IsPhoneNumber)(region, Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isPhoneNumber(vArgs) }));
exports.IsPhoneNumber = IsPhoneNumber;
const IsCNPJ = (options) => (0, is_cnpj_decorator_1.IsCNPJ)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isCNPJ(vArgs) }));
exports.IsCNPJ = IsCNPJ;
const IsCPF = (options) => (0, is_cpf_decorator_1.IsCPF)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isCPF(vArgs) }));
exports.IsCPF = IsCPF;
const IsCEP = (options) => (0, is_cep_decorator_1.IsCEP)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isCEP(vArgs) }));
exports.IsCEP = IsCEP;
const IsDateString = (dateOptions, options) => (0, class_validator_1.IsISO8601)(Object.assign({}, dateOptions), Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isDateString(vArgs) }));
exports.IsDateString = IsDateString;
const IsObject = (options) => (0, class_validator_1.IsObject)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isObject(vArgs) }));
exports.IsObject = IsObject;
const IsBoolean = (options) => (0, class_validator_1.IsBoolean)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isBoolean(vArgs) }));
exports.IsBoolean = IsBoolean;
const ArrayNotEmpty = (options) => (0, class_validator_1.ArrayNotEmpty)(Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.arrayNotEmpty(vArgs) }));
exports.ArrayNotEmpty = ArrayNotEmpty;
const Min = (minValue, options) => (0, class_validator_1.Min)(minValue, Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.min(vArgs, minValue) }));
exports.Min = Min;
const IsUrl = (urlOptions, options) => (0, class_validator_1.IsUrl)(Object.assign({}, urlOptions), Object.assign(Object.assign({}, options), { message: vArgs => ValidationMessages.isUrl(vArgs) }));
exports.IsUrl = IsUrl;
//# sourceMappingURL=class-validator.js.map